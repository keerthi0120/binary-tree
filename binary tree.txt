import java.util.*;
public class BinarySearchTree{
 class Node {
 int key;
 Node left, right;
 public Node(int item)
 {
 key = item;
 left = right = null;
 }
 }
 Node root;
 BinarySearchTree() { root = null; }
 BinarySearchTree(int value) { root = new Node(value); }
 void insert(int key) { root = insertRec(root, key); }
 Node insertRec(Node root, int key)
 {
 if (root == null) {
 root = new Node(key);
 return root;
 }
 else if (key < root.key)
 root.left = insertRec(root.left, key);
 else if (key > root.key)
 root.right = insertRec(root.right, key);
 return root;
 }
 void inorder() { inorderRec(root);}
void inorderRec(Node root)
 {
 if (root != null) {
 inorderRec(root.left);
 System.out.print(root.key + " " );
 inorderRec(root.right);
 }
 }
 void deleteKey(int key) { root = deleteRec(root, key); }
 Node deleteRec(Node root, int key)
 {
 if (root == null)
 return root;
 if (key < root.key)
 root.left = deleteRec(root.left, key);
 else if (key > root.key)
 root.right = deleteRec(root.right, key);
 else {
 if (root.left == null)
 return root.right;
 else if (root.right == null)
 return root.left;
 root.key = minValue(root.right);
 root.right = deleteRec(root.right, root.key);
 }
 return root;
 }
 int minValue(Node root)
}
int minv = root.key;
 while (root.left != null) 
 {
 minv = root.left.key;
 root = root.left;
 }
 return minv;
 }
public static void main(String[] args)
 {
int n;
Scanner s = new Scanner(System.in);
System.out.println("Enter the size");
n = s.nextInt();
 BinarySearchTree tree = new BinarySearchTree();
System.out.println("Enter the nodes");
for(int i=0;i<n;i++)
{
 tree.insert(s.nextInt());
}
System.out.println("The inserted nodes are");
 tree.inorder();
int m;
System.out.println("\nEnter the node to delete");
m = s.nextInt();
tree.deleteKey(m);
System.out.println("The binary tree after deleting "+ m);
tree.inorder();
 } }
